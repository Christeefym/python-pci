/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.9
 */

#include "sipAPIpcie.h"

#line 8 "python-pcie.sip"
    #include "../include/python_pcie.h"
#line 12 "./sippciePythonPCIE.cpp"

#line 30 "python-pcie.sip"
#include <stdint.h>
#line 16 "./sippciePythonPCIE.cpp"
#line 69 "python-pcie.sip"
#include <stdint.h>
#line 19 "./sippciePythonPCIE.cpp"


extern "C" {static PyObject *meth_PythonPCIE_open_pcie(PyObject *, PyObject *);}
static PyObject *meth_PythonPCIE_open_pcie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        uint64_t* a1;
        int a1State = 0;
        PythonPCIE *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ1", &sipSelf, sipType_PythonPCIE, &sipCpp, &a0, sipType_uint64_t,&a1, &a1State))
        {
            int sipRes;

            sipRes = sipCpp->open_pcie(a0,*a1);
            sipReleaseType(a1,sipType_uint64_t,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PythonPCIE, sipName_open_pcie, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_PythonPCIE_is_open(PyObject *, PyObject *);}
static PyObject *meth_PythonPCIE_is_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PythonPCIE *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_PythonPCIE, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->is_open();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PythonPCIE, sipName_is_open, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_PythonPCIE_close_pcie(PyObject *, PyObject *);}
static PyObject *meth_PythonPCIE_close_pcie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PythonPCIE *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_PythonPCIE, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->close_pcie();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PythonPCIE, sipName_close_pcie, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_PythonPCIE_write(PyObject *, PyObject *);}
static PyObject *meth_PythonPCIE_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        uint64_t* a0;
        int a0State = 0;
        uint64_t* a1;
        int a1State = 0;
        const uint8_t* a2;
        int a2State = 0;
        PythonPCIE *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J0", &sipSelf, sipType_PythonPCIE, &sipCpp, sipType_uint64_t,&a0, &a0State, sipType_uint64_t,&a1, &a1State, sipType_uint8_t,&a2, &a2State))
        {
            int sipRes;

            sipRes = sipCpp->write(*a0,*a1,a2);
            sipReleaseType(a0,sipType_uint64_t,a0State);
            sipReleaseType(a1,sipType_uint64_t,a1State);
            sipReleaseType(const_cast<uint8_t *>(a2),sipType_uint8_t,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PythonPCIE, sipName_write, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_PythonPCIE_read(PyObject *, PyObject *);}
static PyObject *meth_PythonPCIE_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        uint64_t* a0;
        int a0State = 0;
        uint64_t* a1;
        int a1State = 0;
        uint8_t* a2;
        int a2State = 0;
        PythonPCIE *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J0", &sipSelf, sipType_PythonPCIE, &sipCpp, sipType_uint64_t,&a0, &a0State, sipType_uint64_t,&a1, &a1State, sipType_uint8_t,&a2, &a2State))
        {
            int sipRes;

            sipRes = sipCpp->read(*a0,*a1,a2);
            sipReleaseType(a0,sipType_uint64_t,a0State);
            sipReleaseType(a1,sipType_uint64_t,a1State);
            sipReleaseType(a2,sipType_uint8_t,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PythonPCIE, sipName_read, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_PythonPCIE(void *, const sipTypeDef *);}
static void *cast_PythonPCIE(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_PythonPCIE)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_PythonPCIE(void *, int);}
static void release_PythonPCIE(void *sipCppV,int)
{
    delete reinterpret_cast<PythonPCIE *>(sipCppV);
}


extern "C" {static void assign_PythonPCIE(void *, SIP_SSIZE_T, const void *);}
static void assign_PythonPCIE(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<PythonPCIE *>(sipDst)[sipDstIdx] = *reinterpret_cast<const PythonPCIE *>(sipSrc);
}


extern "C" {static void *array_PythonPCIE(SIP_SSIZE_T);}
static void *array_PythonPCIE(SIP_SSIZE_T sipNrElem)
{
    return new PythonPCIE[sipNrElem];
}


extern "C" {static void *copy_PythonPCIE(const void *, SIP_SSIZE_T);}
static void *copy_PythonPCIE(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new PythonPCIE(reinterpret_cast<const PythonPCIE *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_PythonPCIE(sipSimpleWrapper *);}
static void dealloc_PythonPCIE(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_PythonPCIE(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_PythonPCIE(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_PythonPCIE(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    PythonPCIE *sipCpp = 0;

    {
        bool a0 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "|b", &a0))
        {
            sipCpp = new PythonPCIE(a0);

            return sipCpp;
        }
    }

    {
        const PythonPCIE* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_PythonPCIE, &a0))
        {
            sipCpp = new PythonPCIE(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_PythonPCIE[] = {
    {SIP_MLNAME_CAST(sipName_close_pcie), meth_PythonPCIE_close_pcie, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_is_open), meth_PythonPCIE_is_open, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_open_pcie), meth_PythonPCIE_open_pcie, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_read), meth_PythonPCIE_read, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_write), meth_PythonPCIE_write, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef_pcie_PythonPCIE = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_PythonPCIE,
        {0}
    },
    {
        sipNameNr_PythonPCIE,
        {0, 0, 1},
        5, methods_PythonPCIE,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_type_PythonPCIE,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_PythonPCIE,
    assign_PythonPCIE,
    array_PythonPCIE,
    copy_PythonPCIE,
    release_PythonPCIE,
    cast_PythonPCIE,
    0,
    0,
    0,
    0,
    0,
    0
};
